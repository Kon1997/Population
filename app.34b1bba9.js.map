{"version":3,"sources":["../src/tile.ts","../src/util.ts","../src/person.ts","../src/board.ts","../src/game.ts","../src/html_connector.ts","../src/app.ts"],"names":[],"mappings":"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","file":"app.34b1bba9.js","sourceRoot":"../public","sourcesContent":["export default class Tile {\n  constructor(public colour: number) {}\n}\n","import Person from \"./person\";\n\nexport default class Util {\n  // Random int between min inclusive and max exclusive.\n  public static randomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  // Change rgb int to rgb hexadecimal string.\n  public static rgb2hex(num: number): string {\n    const s: string = \"000000\" + num.toString(16);\n    return \"#\" + s.substr(s.length - 6);\n  }\n\n  public static int2hex(num: number): string {\n    const s: string = \"00\" + num.toString(16);\n    return s.substr(s.length - 2);\n  }\n\n  // Average vitality of Person in colony.\n  public static average(persons: Person[]): number {\n    let sum = 0;\n    for (const person of persons) {\n      sum += person.vitality;\n    }\n    return sum / persons.length;\n  }\n\n  // Maximum vitality of Person in colony.\n  public static maxVitality(persons: Person[]): number {\n    let max = 0;\n    for (const person of persons) {\n      if (person.vitality > max) {\n        max = person.vitality;\n      }\n    }\n    return max;\n  }\n\n  public static maxSaturation(imageData: Uint8ClampedArray): Uint8ClampedArray {\n    let temp: number;\n    for (let i: number = 0; i < imageData.length; i += 4) {\n      temp = Math.max(imageData[i], imageData[i + 1], imageData[i + 2]);\n      for (let j: number = 0; j < 3; j++) {\n        if (imageData[i + j] === temp) {\n          imageData[i + j] = 255;\n        } else {\n          imageData[i + j] = 0;\n        }\n      }\n    }\n    return imageData;\n  }\n}\n","import Board from \"./board\";\nimport Game from \"./game\";\nimport Tile from \"./tile\";\nimport Util from \"./util\";\n\nexport default class Person extends Tile {\n  private dead = false;\n  private diseased = false;\n\n  constructor(\n    private game: Game,\n    private map: Board,\n    private x: number,\n    private y: number,\n    private age = 0,\n    private reproductionValue = 0,\n    public colour = 0,\n    public vitality = Util.randomInt(20, 70),\n  ) {\n    super(colour);\n    this.game.colonyPush(this);\n  }\n\n  // Check whether Person should die.\n  public shouldDie(): boolean {\n    return this.vitality < this.age;\n  }\n\n  // Make Person ill or well.\n  public cripple(chance: boolean): void {\n    const howMuch = 2; // I don't remember how big number should it be, but it makes linting problems\n    if (Math.random() < 0.5) { return; }\n    if (chance && this.diseased) {\n      this.vitality *= howMuch;\n      this.diseased = false;\n      return;\n    }\n    this.vitality /= howMuch;\n    this.diseased = true;\n  }\n\n  // Person move every age.\n  public move(): void {\n    this.age++;\n    this.reproductionValue++;\n    // this.cripple(true);\n    let x;\n    let y;\n    do {\n      x = Util.randomInt(-1, 1);\n      y = Util.randomInt(-1, 1);\n    } while (\n      !this.map.isInBounds(this.x + x, this.y + y) &&\n      (x === 0 && y === 0)\n    );\n    const obj = this.map.getObj(this.x + x, this.y + y);\n    const tempColour: number = obj ? obj.colour : this.game.WATER_COLOUR;\n    switch (tempColour) {\n      case this.game.GRASS_COLOUR:\n        this.map.setObj(this.x, this.y, this.game.GRASS_TILE);\n        this.reproduce();\n        this.x += x;\n        this.y += y;\n        this.map.setObj(this.x, this.y, this);\n        break;\n      case this.game.WATER_COLOUR:\n        break;\n      case this.colour:\n        break;\n      default:\n        if (\n          this.vitality >=\n          (this.map.getObj(this.x + x, this.y + y) as Person).vitality\n        ) {\n          this.map.setObj(this.x, this.y, this.game.GRASS_TILE);\n          this.reproduce();\n          this.x += x;\n          this.y += y;\n          this.map.killPerson(this.x, this.y, this);\n        } else {\n          this.map.setObj(this.x, this.y, this.game.GRASS_TILE);\n          this.kill();\n        }\n        break;\n    }\n    if (this.shouldDie()) {\n      this.map.setObj(this.x, this.y, this.game.GRASS_TILE);\n      this.kill();\n    }\n  }\n\n  // Reproduction.\n  public reproduce(): void {\n    if (this.reproductionValue < this.game.reproductiveThreshold) {\n      return;\n    }\n    this.reproductionValue = 0;\n    const variable: number = Util.randomInt(-5, 5);\n    this.map.setObj(\n      this.x,\n      this.y,\n      new Person(\n        this.game,\n        this.map,\n        this.x,\n        this.y,\n        0,\n        Util.randomInt(0, 100),\n        this.colour,\n        this.vitality + variable,\n      ),\n    );\n  }\n\n  public kill(): void {\n    this.dead = true;\n    this.game.colonyRemove(this);\n  }\n}\n","import Game from \"./game\";\nimport Person from \"./person\";\nimport Tile from \"./tile\";\nimport Util from \"./util\";\n\nexport default class Board {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private map: (Tile)[][];\n  private height: number;\n  private width: number;\n  private coloniesNumber: number;\n  private game: Game;\n\n  constructor(game: Game, canvas: HTMLCanvasElement, coloniesNumber: number) {\n    this.coloniesNumber = coloniesNumber;\n    this.game = game;\n    this.canvas = canvas;\n    this.height = canvas.height;\n    this.width = canvas.width;\n    this.context = canvas.getContext(\"2d\");\n    const imageData = this.context.getImageData(0, 0, this.width, this.height)\n      .data;\n\n    this.map = [];\n    for (let i = 0; i < this.width; i++) {\n      this.map[i] = [];\n    }\n    for (let i = 0; i < imageData.length; i += 4) {\n      const color: string =\n        \"#\" +\n        Util.int2hex(imageData[i]) +\n        Util.int2hex(imageData[i + 1]) +\n        Util.int2hex(imageData[i + 2]);\n      if (color === this.game.getColour(this.game.GRASS_COLOUR)) {\n        const x = (i / 4) % this.width;\n        const y = Math.floor(i / 4 / this.width);\n        this.map[x][y] = this.game.GRASS_TILE;\n      }\n      if (color === this.game.getColour(this.game.WATER_COLOUR)) {\n        const x = (i / 4) % this.width;\n        const y = Math.floor(i / 4 / this.width);\n        this.map[x][y] = this.game.WATER_TILE;\n      }\n    }\n    this.createColonies();\n  }\n\n  // Check whether x and y are in board's bounds.\n  public isInBounds(x: number, y: number): boolean {\n    return x >= 0 && x < this.width && y >= 0 && y < this.height;\n  }\n\n  // Returns object at (x, y).\n  public getObj(x: number, y: number): Tile {\n    if (this.isInBounds(x, y)) {\n      return this.map[x][y];\n    }\n    return null;\n  }\n\n  // Sets object at (x, y).\n  public setObj(x: number, y: number, obj: Tile): void {\n    this.map[x][y] = obj;\n    this.context.fillStyle = this.game.getColour(obj.colour);\n    this.context.fillRect(x, y, 1, 1);\n  }\n\n  // Kills Person at position.\n  public killPerson(x: number, y: number, killer: Person): void {\n    (this.map[x][y] as Person).kill();\n    this.setObj(x, y, killer);\n  }\n\n  // Create colonies.\n  public createColonies(): void {\n    let x;\n    let y;\n    const offset = 10;\n    let x2;\n    let y2;\n    let test;\n    for (let i: number = 0; i < this.coloniesNumber; i++) {\n      while (true) {\n        x = Util.randomInt(0, this.width - 1);\n        y = Util.randomInt(0, this.height - 1);\n        if (this.map[x][y].colour === this.game.GRASS_COLOUR) {\n          break;\n        }\n      }\n      for (let j: number = 0; j < 50; j++) {\n        test = 0;\n        while (true) {\n          test += 1;\n          do {\n            test += 0.01;\n            x2 = x + Util.randomInt(0, offset);\n            y2 = y + Util.randomInt(0, offset);\n          } while (!this.isInBounds(x2, y2));\n          if (test >= 50) {\n            break;\n          }\n          if (this.map[x2][y2].colour === this.game.GRASS_COLOUR) {\n            this.setObj(\n              x2,\n              y2,\n              new Person(\n                this.game,\n                this,\n                x2,\n                y2,\n                0,\n                Util.randomInt(0, 100),\n                i,\n                Util.randomInt(0, 100),\n              ),\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n","import Board from \"./board\";\nimport HTMLConnector from \"./html_connector\";\nimport Person from \"./person\";\nimport Tile from \"./tile\";\nimport Util from \"./util\";\n\nexport default class Game {\n  public ageCount = 0;\n  public colours = [\n    \"#ffff00\",\n    \"#ff00ff\",\n    \"#ff0000\",\n    \"#8800ff\",\n    \"#ff8800\",\n    \"#888888\",\n    \"#8888ff\",\n    \"#ff0088\",\n    \"#000000\",\n    \"#0088ff\",\n    \"#00ff00\",\n    \"#0000ff\",\n  ];\n  public coloniesColours: number = this.colours.length - 2;\n  public colonies: Person[][] = [];\n\n  public coloniesNumber: number;\n\n  public GRASS_COLOUR = this.colours.length - 2;\n  public WATER_COLOUR = this.colours.length - 1;\n\n  public GRASS_TILE: Tile;\n  public WATER_TILE: Tile;\n\n  public reproductiveThreshold: number;\n\n  public intervalPointer: number;\n\n  public htmlConnector: HTMLConnector;\n  public image = new Image();\n  public map: Board;\n  public canvas: HTMLCanvasElement;\n\n  public coloniesLabels: NodeListOf<HTMLSpanElement>;\n\n  public peopleCount = 0;\n\n  public speed: number;\n\n  public lastTime: number;\n\n  public timer = 0;\n\n  constructor(\n    htmlConnector: HTMLConnector,\n    canvas: HTMLCanvasElement,\n    image: string,\n    coloniesNumber: number,\n    speed: number,\n    reproductiveThreshold: number,\n    allowGWColours: boolean = false,\n    grassColour = \"\",\n    waterColour = \"\",\n  ) {\n    this.htmlConnector = htmlConnector;\n    this.canvas = canvas;\n    this.speed = speed;\n    this.coloniesNumber = coloniesNumber;\n    this.GRASS_TILE = new Tile(this.GRASS_COLOUR);\n    this.WATER_TILE = new Tile(this.WATER_COLOUR);\n    this.reproductiveThreshold = reproductiveThreshold;\n    this.image.onload = () => {\n      this.setup();\n    };\n    this.image.onerror = () => {\n      window.alert(\"loading failed\");\n    };\n    this.image.src = image;\n  }\n\n  public setup(): void {\n    this.canvas.width = this.image.width;\n    this.canvas.height = this.image.height;\n    /*\n      if (this.canvas.height > this.canvas.width) {\n        this.canvas.style.height = \"75%\";\n      } else {\n        this.canvas.style.width = \"75%\";\n      }\n    */\n    this.canvas.getContext(\"2d\").drawImage(this.image, 0, 0);\n    for (let i: number = 0; i < this.coloniesNumber; i++) {\n      this.colonies[i] = [];\n    }\n    this.map = new Board(\n      this,\n      this.canvas as HTMLCanvasElement,\n      this.coloniesNumber,\n    );\n    this.intervalPointer = setInterval(this.play.bind(this), this.speed);\n    this.htmlConnector.$statisticsPanel.innerHTML = \"\";\n    for (let i: number = 0; i < this.coloniesNumber; i++) {\n      this.htmlConnector.$statisticsPanel.innerHTML +=\n        '<span style=\"color:' + this.colours[i] + '\"></span><br>';\n    }\n    this.coloniesLabels = this.htmlConnector.$statisticsPanel.querySelectorAll(\n      \"span\",\n    );\n  }\n\n  public play(): void {\n    this.lastTime = Date.now();\n    for (let i: number = 0; i < this.coloniesNumber; i++) {\n      if (this.colonies[i] === null) {\n        continue;\n      }\n      for (const person of this.colonies[i]) {\n        person.move();\n      }\n      if (this.colonies[i].length === 0) {\n        this.coloniesLabels[i].innerHTML =\n          \"<del>Colony \" +\n          (i + 1) +\n          \": \" +\n          this.colonies[i].length +\n          \" Avg Vit : \" +\n          Util.average(this.colonies[i]).toFixed(2) +\n          \" Max Vit: \" +\n          Util.maxVitality(this.colonies[i]).toFixed(2) +\n          \"</del>\";\n        this.colonies[i] = null;\n        continue;\n      }\n      this.coloniesLabels[i].innerHTML =\n        \"Colony \" +\n        (i + 1) +\n        \": \" +\n        this.colonies[i].length +\n        \" Avg Vit : \" +\n        Util.average(this.colonies[i]).toFixed(2) +\n        \" Max Vit: \" +\n        Util.maxVitality(this.colonies[i]).toFixed(2);\n    }\n    this.htmlConnector.$ageLabel.innerHTML = \"Age: \" + this.ageCount++;\n    this.timer += Date.now() - this.lastTime;\n    if (this.timer > 250) {\n      this.htmlConnector.$fpsLabel.innerHTML =\n        \"FPS: \" + (1000 / (Date.now() - this.lastTime)).toFixed(0);\n      this.timer = 0;\n    }\n  }\n\n  public getColour(index: number): string {\n    return this.colours[index];\n  }\n\n  public colonyPush(obj: Person): void {\n    this.colonies[obj.colour].push(obj);\n    this.peopleCount++;\n  }\n\n  public colonyRemove(obj: Person): void {\n    const index = this.colonies[obj.colour].indexOf(obj, 0);\n    if (index > -1) {\n      this.colonies[obj.colour].splice(index, 1);\n    }\n    this.peopleCount--;\n  }\n\n  public stop(): void {\n    clearInterval(this.intervalPointer);\n  }\n}\n","import Game from \"./game\";\nimport Util from \"./util\";\n\nexport default class HTMLConnector {\n  public game: Game;\n  public $canvas: HTMLCanvasElement;\n  public $statisticsPanel: HTMLElement;\n  public $ageLabel: HTMLElement;\n  public $fpsLabel: HTMLElement;\n  public $mapSelect: HTMLSelectElement;\n  public $numberOfColonies: HTMLInputElement;\n  public $timeInterval: HTMLInputElement;\n  public $reproductiveThreshold: HTMLInputElement;\n  public $addMap: HTMLInputElement;\n  public $startGame: HTMLButtonElement;\n  public $allowGWChanging: HTMLButtonElement;\n\n  public landWaterColours: boolean = false;\n\n  constructor() {\n    this.$canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    this.$statisticsPanel = document.getElementById(\"test\");\n    this.$ageLabel = document.querySelector(\"#age\");\n    this.$fpsLabel = document.querySelector(\"#fps\");\n    this.$mapSelect = document.querySelector(\"#level_map\");\n    this.$mapSelect.addEventListener(\"change\", () => {\n      this.getPreview();\n    });\n    this.$numberOfColonies = document.querySelector(\"#number_of_colonies\");\n    this.$timeInterval = document.querySelector(\"#time_interval\");\n    this.$reproductiveThreshold = document.querySelector(\n      \"#reproductive_threshold\",\n    );\n    this.$addMap = document.querySelector(\"#add_map\");\n    this.$addMap.addEventListener(\"change\", () => {\n      this.updateMapList();\n    });\n    this.$startGame = document.querySelector(\"#start_game\");\n    this.$startGame.addEventListener(\"click\", () => {\n      this.startGame();\n    });\n\n    this.$allowGWChanging = document.querySelector(\"#allow_gw_colours\");\n    this.$allowGWChanging.addEventListener(\"click\", () => {\n      this.allowGWColourChanging();\n    });\n\n    this.getPreview();\n  }\n\n  // Start Game.\n  public startGame() {\n    if (this.game) {\n      this.game.stop();\n    }\n    this.game = new Game(\n      this,\n      this.$canvas,\n      (this.$mapSelect.options[\n        this.$mapSelect.selectedIndex\n      ] as HTMLOptionElement).value,\n      parseInt(this.$numberOfColonies.value, 10),\n      parseInt(this.$timeInterval.value, 10),\n      parseInt(this.$reproductiveThreshold.value, 10),\n    );\n  }\n\n  public getPreview(): void {\n    const canvas: HTMLCanvasElement = document.querySelector(\"canvas.preview\");\n    const image: HTMLImageElement = new Image();\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      canvas.getContext(\"2d\").drawImage(image, 0, 0);\n    };\n    image.onerror = () => {\n      window.alert(\"loading preview failed\");\n    };\n    image.src = (this.$mapSelect.options[\n      this.$mapSelect.selectedIndex\n    ] as HTMLOptionElement).value;\n  }\n\n  // Update map list after uploading new map.\n  public updateMapList(): void {\n    this.$mapSelect.innerHTML +=\n      '<option value=\"' +\n      window.URL.createObjectURL(this.$addMap.files[0]) +\n      '\" >' +\n      this.$addMap.files[0].name +\n      \"</option>\";\n  }\n\n  // Allow grass and water colours changing.\n  public allowGWColourChanging(): void {\n    const canvas: HTMLCanvasElement = document.querySelector(\"canvas.preview\");\n    if (this.landWaterColours) {\n      this.landWaterColours = false;\n      (document.querySelector(\".colorGWPick\") as HTMLElement).style.display =\n        \"none\";\n      canvas.removeEventListener(\"mousemove\", this.pick);\n    } else {\n      this.landWaterColours = true;\n      (document.querySelector(\".colorGWPick\") as HTMLElement).style.display =\n        \"block\";\n      canvas.addEventListener(\"mousemove\", this.pick);\n    }\n  }\n\n  // Pick colours.\n  public pick(event: MouseEvent): void {\n    const x = event.clientX;\n    const y = event.clientY;\n    const pixel = (event.target as HTMLCanvasElement)\n      .getContext(\"2d\")\n      .getImageData(x, y, 1, 1);\n    const data = pixel.data;\n    const hex =\n      \"#\" +\n      Util.int2hex(data[0]) +\n      Util.int2hex(data[1]) +\n      Util.int2hex(data[2]);\n    (document.querySelector(\n      \".colorGWPick\",\n    ) as HTMLElement).style.background = hex;\n    (document.querySelector(\".colorGWPick\") as HTMLElement).textContent = hex;\n  }\n}\n","import HTMLConnector from \"./html_connector\";\n\nwindow.onload = () => {\n  const htCon = new HTMLConnector();\n  htCon.startGame();\n};\n"]}